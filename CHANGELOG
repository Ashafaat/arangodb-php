
Release notes for the ArangoDB-PHP driver 3.0
=============================================

This version of the driver is compatible with ArangoDB 3.0. 
It is not compatible to earlier versions of ArangoDB (i.e. 2.x).
Please use ones of the `2.x` branches of the driver for 2.x-compatibility.

Unsupported functionality
=========================

Cap constraints
---------------

Support for cap constraints has been discontinued on the 3.0 version of ArangoDB.
Therefore, the following methods have also been removed from the PHP driver in
the 3.0 branch:

- CollectionHandler::createCapConstraint($collectionId, $size)
- CollectionHandler::first($collectionId, $count = null)
- CollectionHandler::last($collectionId, $count = null)

Custom queues
-------------

"Custom queues" were an undocumented, experimental feature in later versions
of the 2.x driver. Its purpose was to send requests to dedicated processing
queues on the server. This functionality has been removed from the 3.0 ArangoDB
server and the 3.0 driver.

Due to that the following undocumented methods have been removed from the
PHP driver:

- Handler::enableCustomQueue($queueName, $count = null) 
- Handler::disableCustomQueue() 
- Connection::enableCustomQueue($queueName, $count = null) 
- Connection::disableCustomQueue() 

Batch requests
--------------

The 2.x versions of the PHP driver allowed assembling HTTP operations in the
client without actually dispatching them immediately. Once enough operations
were assembled, they could be sent in a batch to the server.

The PHP driver offered the classes `Batch` and `BatchPart` for this purpose.
These have been removed from the 3.0 version of the driver.

The `Connection` class also had methods for working with batches, namely:

- Connection::stopCaptureBatch()
- Connection::getActiveBatch()
- Connection::setActiveBatch($batch)
- Connection::setCaptureBatch($state)
- Connection::setBatchRequest($state)
- Connection::isInBatchCaptureMode()
- Connection::getBatches()

These have been removed in the 3.0 version of the driver as well.

Client versioning
-----------------

The client-side versioning feature was also removed from the driver in version
3.0. The versioning feature allowed sending the HTTP header `X-Arango-Version`
with the desired version number for all requests made from the driver. The
ArangoDB server interpreted the value of this HTTP header at some endpoints and
returned result structures matching the ones from older versions of ArangoDB.

This feature was abandoned on the server-side in 3.0 so the versioning was
removed from the driver as well. This also means the following methods have
been removed from the driver's `Connection` class.

- Connection::getVersion()
- Connection::getClientVersion()

Changed functionality
=====================

When replacing edges via the `EdgeHandler::replace()` method, it is now
required to specify both the `_from` and `_to` values of the replacing edge.
If either attribute is missing or invalid, the replace operation will fail
with an error `invalid edge attribute` on the server-side.

That means the following may not work:

```php
$edgeHandler = new EdgeHandler($connection);

$edge = new Edge();
$edge->set("_id", $idOfExistingEdge);
/* set some other edge attributes */
...

$result = $edgeHandler->replace($edge);
```

until at least `_from` and `_to` are also set via the `setFrom()` and `setTo()`
methods:

```php
$edgeHandler = new EdgeHandler($connection);

$edge = new Edge();
$edge->set("_id", $idOfExistingEdge);
/* set some other edge attributes */
...
$edge->setFrom($fromHandle);
$edge->setTo($toHandle);

$result = $edgeHandler->replace($edge);
```

Note that this affects only the `replace()` and `replaceById()` methods and
not `update()` nor `updateById()`.
